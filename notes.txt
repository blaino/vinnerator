1/15

Added postmark:10k to vinnerator (Free). Welcome to Postmark! You no
longer have to worry about delivering or parsing your application's
important emails. Postmark ensures your transactional emails get to
the inbox and provides a simple process to parse incoming messages.

We have set the following environment variables on your application
server:
POSTMARK_API_KEY
POSTMARK_SMTP_SERVER
POSTMARK_INBOUND_ADDRESS

To get started, run `heroku addons:open postmark` and create your
first sender signature. Need help? * Email us 24/7:
support@postmarkapp.com * Chat is open from 9 - 5pm EST on our site. *
Twitter: @postmarkapp * Status: http://status.postmarkapp.com



1/12

DN Simple

Changing from
@ (Informational)  ns65.domaincontrol.com
to
  ?    ns1.dnsimple.com

1/11

Reset db on heroku:

heroku pg
heroku pg:reset HEROKU_POSTGRESQL_AQUA_URL
git push heroku master

THEN: you had to follow the instructions below to run init_db().  (This needs to be
automated somehow)   ((And, you still need to figure out migration))


1/15

Added postmark:10k to vinnerator (Free). Welcome to Postmark! You no
longer have to worry about delivering or parsing your application's
important emails. Postmark ensures your transactional emails get to
the inbox and provides a simple process to parse incoming messages.

We have set the following environment variables on your application
server:
POSTMARK_API_KEY
POSTMARK_SMTP_SERVER
POSTMARK_INBOUND_ADDRESS

To get started, run `heroku addons:open postmark` and create your
first sender signature. Need help? * Email us 24/7:
support@postmarkapp.com * Chat is open from 9 - 5pm EST on our site. *
Twitter: @postmarkapp * Status: http://status.postmarkapp.com



1/12

DN Simple

Changing from
@ (Informational)  ns65.domaincontrol.com
to
  ?    ns1.dnsimple.com

1/11

Reset db on heroku:

heroku pg
heroku pg:reset HEROKU_POSTGRESQL_AQUA_URL
git push heroku master

THEN: you had to follow the instructions below to run init_db().  (This needs to be
automated somehow)   ((And, you still need to figure out migration))


1/5

Problems with db after adding jfactor jazz.

Could there be something wrong with user ids?  You do understand how
these are working?  Stash and see how things were working before?

You also had the weird problem where the unit tests pass, but the app
gets jammed up with db stuff.  mysql versus psql?  SqlAlchmey is
supposed to insulate you.  That's what makes me think the db has
gotten into a bad state.  But you deleted all the rows...  For all
users???

It's like a new schema version for Praefectus.

From the psql prompt you see no scenarios.
But, from the python prompt you see a couple, each with a different user_id
And, you're connected to vinnerator_db for both
So, what gives?

You did this:
from the psql prompt: drop database vinnerator_db;
from the shell: createdb -U bnelson -E utf8 -O bnelson vinnerator_db -T template0

Then restarted capulator, and it bitched.  Checked the db, nothing in it.  So manually, from a python prompt:

>>> import os
import os
>>> os.environ["DATABASE_URL"] = "postgresql://localhost/vinnerator_db"
os.environ["DATABASE_URL"] = "postgresql://localhost/vinnerator_db"
>>> import app
import app
>>> from app import db, views
from app import db, views
>>> from app import models
from app import models
>>> models.init_db()
models.init_db()
>>> db
db
<SQLAlchemy engine='postgresql://localhost/vinnerator_db'>
>>> scenarios = models.Scenario.query.all()
scenarios = models.Scenario.query.all()
>>> scenarios
scenarios
[<Title u'default'>]

After that capulator ran fine (add scenarios, etc.)

So, question: when you do this sort of kill the db and make a new one
(which you shouldn't do - I think some sort of migration is in order),
do you have to do some manually initialization in python?  Does
capulator not get things set up for you automatically?

What's going to happen when you try to get this change out to heroku?
Do you need to figure out migration sooner than later?





12/28

heroku credentials:
Bull Dog


12/22

db deletion problems.

add x, x1, x2, delete x1: works
back to x, add x1: x x2 x1
delete x2: works: x x1
delete x1: and it gets rid of x not x1

Can't replicate that.

Can add two of the same index...  how to prevent?
Now, we check for the title being the same to something already in the list.  We don't
check if the new name is already in the list.



9/26

* Need to not have to init the db when you run...
if entry blah
else init_db()
something like that?

* default values?  Didn't go well.


done* put a scenario[0] in just to get going.
done* mod the html file to show those values
done* mod __init__ to take all the scenario values
  * could say if x then assign x ow assign default?
done* mod add_scenario() to take all the request form vars
* replace text with cap rate
  * You have a Scenario, but CalcTestCase takes a dictionary
  * option: do the __dict__ trick, but then you have to change dict format
  * option: pass in a Scenario, and change calc to use those

TIME TO REPEAT YOURSELF!!!



9/25

* Port calculations
  * Something is off; the irr is not the same...
* Display inputs and output
  * jQgrid?
* Get real login working
  * https://github.com/maxcountryman/flask-login/   ?


9/24

* The nav bar is not responsive, i.e. it disappears when squeezed.
  But, it works fine mobile.

bnelson@Blaines-MacBook:~/Projects/vinnerator (master):$ heroku addons:add heroku-postgresql:dev
Adding heroku-postgresql:dev on vinnerator... done, v13 (free)
Attached as HEROKU_POSTGRESQL_AQUA_URL
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pgbackups:restore.
Use `heroku addons:docs heroku-postgresql` to view documentation.


9/23

done* Since you're using alchemy, there shouldn't be sql queries; can just
  do things in python.  So you need to convert the query to python.

* Do you even need the before_request and teardown_request bits?
  Flask-SQLAlchemy does stuff for you...

done* Conversion to alchemy complete, what next?

done* Get the unit test working again.  Tricky b/c you don't yet
  understand new db sessions in alchemy.  The old tester made a new db
  or db session each time.  You need the same thing.  * login/logout
  work, but posting doesn't.  Is this b/c the db is not up and running
  in the test env?  Probably.  But, ...  Nope: wrong password.  But
  you're still not sure it's not using sqllite....

* Do stuff to make it look like bootstrap and good.

done* Deploy to heroku - the db home will need to change...


9/22

* Do you need an SQLAlchemy engine?  See the postgres.app doc.

9/21

* 2 Goals: Migrate app to postgres locally & deploy
* For the latter, heroku's foreman will be key
* For the former, you'll need


9/20

* Need to switch from sql lite to postgresql.
* You don't understand switching from one db to a remote one.
* username: admin password: default psql flask stuff
* should I install a different postgresql somewhere else? or just a a db to this postgres?
   (the latter...)
* duh.  there isn't postgresql on the mac - only on your vm
* or did the mac come with it?


Postgresql cheat sheet 1:

change to postgres user and open psql prompt
sudo -u postgres psql postgres

list databases
postgres=# \l

list roles
postgres=# \du

create role
postgres=#CREATE ROLE demorole1 WITH LOGIN ENCRYPTED PASSWORD 'password1' CREATEDB;

alter role
postgres=#ALTER ROLE demorole1 CREATEROLE CREATEDB REPLICATION SUPERUSER;

drop role
postgres=#DROP ROLE demorole1;

create database
postgres=#CREATE DATABASE demodb1 WITH OWNER demorole1 ENCODING 'UTF8';

grant privileges to new user
GRANT ALL PRIVILEGES ON DATABASE demodb1 TO demorole1;

drop database
postgres=#DROP DATABASE demodb1;

connect to database
\c <databasename>

list tables in connected database
\dt

list columns on table
\d <tablename>

backup database
pg_dump <databasename> > <outfile>

change to postgres user and open psql prompt
sudo -u postgres psql postgres

list databases
postgres=# \l

list roles
postgres=# \du

create role
postgres=#CREATE ROLE demorole1 WITH LOGIN ENCRYPTED PASSWORD 'password1' CREATEDB;

alter role
postgres=#ALTER ROLE demorole1 CREATEROLE CREATEDB REPLICATION SUPERUSER;

drop role
postgres=#DROP ROLE demorole1;

create database
postgres=#CREATE DATABASE demodb1 WITH OWNER demorole1 ENCODING 'UTF8';

grant privileges to new user
GRANT ALL PRIVILEGES ON DATABASE demodb1 TO demorole1;

drop database
postgres=#DROP DATABASE demodb1;

connect to database
\c <databasename>

list tables in connected database
\dt

list columns on table
\d <tablename>

backup database
pg_dump <databasename> > <outfile>

SELECT * from scenario;

To delete all rows in table:
DELETE from scenario;


9/18

* Need git repo
* Then follow: http://ryaneshea.com/lightweight-python-apps-with-flask-twitter-bootstrap-and-heroku


Flask and App Engine
* Download and install app engine sdk
* Do you even want app engine?
